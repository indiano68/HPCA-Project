==PROF== Connected to process 72109 (/ceph/hpc/home/student3/HPCA/HPCA-Project/build/build/executable_window)
Number of devices: 1
Device Number: 0
  Device name: NVIDIA A100-SXM4-40GB
  Memory Clock Rate (MHz): 1186
  Memory Bus Width (bits): 5120
  Peak Memory Bandwidth (GB/s): 1555.2
  Total global memory (Gbytes) 39.5
  Shared memory per block (Kbytes) 48.0
  minor-major: 0-8
  Warp-size: 32
  Concurrent kernels: yes
  Concurrent computation/communication: yes

Size A: 300000000 | Size B: 300000000
---------------------------------
WINDOW: PASS
==PROF== Profiling "mergeLarge_tiled_k": 0%
==WARNING== Backing up device memory in system memory. Kernel replay might be slow. Consider using "--replay-mode application" to avoid memory save-and-restore.
....50%....100% - 47 passes
TILED : PASS
NAIVE : PASS
---------------------------------
Time Thrust: 8.70502
Time window: 13.3878 | Partition T 0.764928
Time tiled : 5913.92 | Partition T 0.498688
Time naive : 57.6317
==PROF== Disconnected from process 72109
[72109] executable_window@127.0.0.1
  void mergeLarge_tiled_k<double>(const T1 *, unsigned long, const T1 *, unsigned long, T1 *, const int2 *) (106535, 1, 1)x(512, 1, 1), Context 1, Stream 7, Device 0, CC 8.0
    Section: GPU Speed Of Light Throughput
    ----------------------- ----------- ------------
    Metric Name             Metric Unit Metric Value
    ----------------------- ----------- ------------
    DRAM Frequency                  Ghz         1.21
    SM Frequency                    Ghz         1.09
    Elapsed Cycles                cycle    8,955,280
    Memory Throughput                 %        88.43
    DRAM Throughput                   %        75.36
    Duration                         ms         8.18
    L1/TEX Cache Throughput           %        88.50
    L2 Cache Throughput               %        60.30
    SM Active Cycles              cycle 8,947,775.22
    Compute (SM) Throughput           %        38.07
    ----------------------- ----------- ------------

    INF   The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To   
          further improve performance, work will likely need to be shifted from the most utilized to another unit.      
          Start by analyzing L1 in the Memory Workload Analysis section.                                                

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved 0% of  
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: PM Sampling
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Maximum Buffer Size             Mbyte         3.80
    Dropped Samples                sample            0
    Maximum Sampling Interval       cycle      640,000
    # Pass Groups                                    4
    ------------------------- ----------- ------------

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         1.52
    Executed Ipc Elapsed  inst/cycle         1.52
    Issue Slots Busy               %        38.10
    Issued Ipc Active     inst/cycle         1.52
    SM Busy                        %        38.10
    -------------------- ----------- ------------

    INF   ALU is the highest-utilized pipeline (29.9%) based on active cycles, taking into account the rates of its     
          different instructions. It executes integer and logic operations. It is well-utilized, but should not be a    
          bottleneck.                                                                                                   

    Section: Memory Workload Analysis
    --------------------------- ----------- ------------
    Metric Name                 Metric Unit Metric Value
    --------------------------- ----------- ------------
    Memory Throughput               Tbyte/s         1.17
    Mem Busy                              %        88.43
    Max Bandwidth                         %        75.36
    L1/TEX Hit Rate                       %         5.23
    L2 Compression Success Rate           %            0
    L2 Compression Ratio                               0
    L2 Hit Rate                           %        64.03
    Mem Pipes Busy                        %        25.99
    --------------------------- ----------- ------------

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 8.612%                                                                                          
          The memory access pattern for global loads from L1TEX might not be optimal. On average, only 28.9 of the 32   
          bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between   
          threads. Check the Source Counters section for uncoalesced global loads.                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 49.63%                                                                                          
          The memory access pattern for shared loads might not be optimal and causes on average a 4.2 - way bank        
          conflict across all 159201112 shared load requests.This results in 375875767 bank conflicts,  which           
          represent 56.08% of the overall 670294775 wavefronts for shared loads. Check the Source Counters section for  
          uncoalesced shared loads.                                                                                     

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %        38.11
    Issued Warp Per Scheduler                        0.38
    No Eligible                            %        61.89
    Active Warps Per Scheduler          warp        11.80
    Eligible Warps Per Scheduler        warp         0.73
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 11.57%                                                                                    
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of   
          11.80 active warps per scheduler, but only an average of 0.73 warps were eligible per cycle. Eligible warps   
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, avoid possible load imbalances due to highly different execution durations per warp.          
          Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.            

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        30.96
    Warp Cycles Per Executed Instruction           cycle        31.01
    Avg. Active Threads Per Warp                                24.02
    Avg. Not Predicated Off Threads Per Warp                    20.77
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 11.57%                                                                                          
          On average, each warp of this kernel spends 12.3 cycles being stalled waiting for a scoreboard dependency on  
          a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited     
          upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the        
          memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by        
          increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently     
          used data to shared memory. This stall type represents about 39.7% of the total average of 31.0 cycles        
          between issuing two instructions.                                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 13.37%                                                                                          
          Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is         
          achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early     
          thread completion, and divergent flow control can significantly lower the number of active threads in a warp  
          per cycle. This kernel achieves an average of 24.0 threads being active per cycle. This is further reduced    
          to 20.8 threads per warp due to predication. The compiler may use predication to avoid an actual branch.      
          Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads  
          execute the instructions. Try to avoid different execution paths within a warp when possible.                 

    Section: Instruction Statistics
    ---------------------------------------- ----------- -------------
    Metric Name                              Metric Unit  Metric Value
    ---------------------------------------- ----------- -------------
    Avg. Executed Instructions Per Scheduler        inst  3,403,363.19
    Executed Instructions                           inst 1,470,252,899
    Avg. Issued Instructions Per Scheduler          inst  3,409,243.39
    Issued Instructions                             inst 1,472,793,144
    ---------------------------------------- ----------- -------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   512
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                106,535
    Registers Per Thread             register/thread              39
    Shared Memory Configuration Size           Kbyte          167.94
    Driver Shared Memory Per Block       Kbyte/block            1.02
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block       Kbyte/block           45.06
    # SMs                                         SM             108
    Threads                                   thread      54,545,920
    Uses Green Context                                             0
    Waves Per SM                                              328.81
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           32
    Block Limit Registers                 block            3
    Block Limit Shared Mem                block            3
    Block Limit Warps                     block            4
    Theoretical Active Warps per SM        warp           48
    Theoretical Occupancy                     %           75
    Achieved Occupancy                        %        73.78
    Achieved Active Warps Per SM           warp        47.22
    ------------------------------- ----------- ------------

    OPT   Est. Speedup: 11.57%                                                                                          
          The 12.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the      
          hardware maximum of 16. This kernel's theoretical occupancy (75.0%) is limited by the number of required      
          registers. This kernel's theoretical occupancy (75.0%) is limited by the required amount of shared memory.    

    Section: GPU and Memory Workload Distribution
    -------------------------- ----------- -------------
    Metric Name                Metric Unit  Metric Value
    -------------------------- ----------- -------------
    Average DRAM Active Cycles       cycle     7,487,945
    Total DRAM Elapsed Cycles        cycle   397,466,624
    Average L1 Active Cycles         cycle  8,947,775.22
    Total L1 Elapsed Cycles          cycle   967,157,102
    Average L2 Active Cycles         cycle  8,579,955.75
    Total L2 Elapsed Cycles          cycle   686,982,800
    Average SM Active Cycles         cycle  8,947,775.22
    Total SM Elapsed Cycles          cycle   967,157,102
    Average SMSP Active Cycles       cycle  8,946,790.29
    Total SMSP Elapsed Cycles        cycle 3,868,628,408
    -------------------------- ----------- -------------

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.18
    Branch Instructions              inst  259,022,960
    Branch Efficiency                   %        81.60
    Avg. Divergent Branches                  76,198.33
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 4.42%                                                                                           
          This kernel has uncoalesced global accesses resulting in a total of 14050907 excessive sectors (4% of the     
          total 317619382 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source      
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 51.2%                                                                                           
          This kernel has uncoalesced shared accesses resulting in a total of 373260707 excessive wavefronts (51% of    
          the total 728354030 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source        
          locations. The CUDA Best Practices Guide                                                                      
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -ab) has an example on optimizing shared memory accesses.                                                     

