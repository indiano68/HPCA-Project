==PROF== Connected to process 421344 (/ceph/hpc/home/student3/HPCA/HPCA-Project/build/executable_cuda)
==PROF== Profiling "merge_k_gpu_serial_tile_shared": 0%
==WARNING== Backing up device memory in system memory. Kernel replay might be slow. Consider using "--replay-mode application" to avoid memory save-and-restore.
....50%....100% - 47 passes
Number of devices: 1
Device Number: 0
  Device name: NVIDIA A100-SXM4-40GB
  Memory Clock Rate (MHz): 1186
  Memory Bus Width (bits): 5120
  Peak Memory Bandwidth (GB/s): 1555.2
  Total global memory (Gbytes) 39.4
  Shared memory per block (Kbytes) 48.0
  minor-major: 0-8
  Warp-size: 32
  Concurrent kernels: yes
  Concurrent computation/communication: yes

Equality Erik     mergeLarge    : True T 36.2383 | Partition T 10.5472
Equality Tiled  mergeLarge    : True T 9925.8 | Partition T 0.85504
Equality thrust   merge         : True T 6.90176
==PROF== Disconnected from process 421344
[421344] executable_cuda@127.0.0.1
  void merge_k_gpu_serial_tile_shared<int>(const T1 *, unsigned long, const T1 *, unsigned long, T1 *, const int2 *) (139509, 1, 1)x(512, 1, 1), Context 1, Stream 7, Device 0, CC 8.0
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         1.21
    SM Frequency            cycle/nsecond         1.09
    Elapsed Cycles                  cycle    8,211,431
    Memory Throughput                   %        80.69
    DRAM Throughput                     %        68.47
    Duration                      msecond         7.50
    L1/TEX Cache Throughput             %        80.75
    L2 Cache Throughput                 %        56.74
    SM Active Cycles                cycle 8,203,672.03
    Compute (SM) Throughput             %        61.88
    ----------------------- ------------- ------------

    INF   The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To   
          further improve performance, work will likely need to be shifted from the most utilized to another unit.      
          Start by analyzing L1 in the Memory Workload Analysis section.                                                

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved 0% of  
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: PM Sampling
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Maximum Buffer Size             Mbyte         2.69
    Dropped Samples                sample            0
    Maximum Sampling Interval       cycle    1,280,000
    # Pass Groups                                    4
    ------------------------- ----------- ------------

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         2.47
    Executed Ipc Elapsed  inst/cycle         2.47
    Issue Slots Busy               %        61.93
    Issued Ipc Active     inst/cycle         2.48
    SM Busy                        %        61.93
    -------------------- ----------- ------------

    INF   ALU is the highest-utilized pipeline (46.7%) based on active cycles, taking into account the rates of its     
          different instructions. It executes integer and logic operations. It is well-utilized, but should not be a    
          bottleneck.                                                                                                   

    Section: Memory Workload Analysis
    --------------------------- ------------ ------------
    Metric Name                  Metric Unit Metric Value
    --------------------------- ------------ ------------
    Memory Throughput           Tbyte/second         1.06
    Mem Busy                               %        80.69
    Max Bandwidth                          %        68.47
    L1/TEX Hit Rate                        %        11.06
    L2 Compression Success Rate            %            0
    L2 Compression Ratio                                0
    L2 Hit Rate                            %        65.49
    Mem Pipes Busy                         %        41.02
    --------------------------- ------------ ------------

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 15.66%                                                                                          
          The memory access pattern for global loads from L1TEX might not be optimal. On average, only 25.8 of the 32   
          bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between   
          threads. Check the Source Counters section for uncoalesced global loads.                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 46%                                                                                             
          The memory access pattern for shared loads might not be optimal and causes on average a 2.3 - way bank        
          conflict across all 237705994 shared load requests.This results in 316805718 bank conflicts,  which           
          represent 56.97% of the overall 556125588 wavefronts for shared loads. Check the Source Counters section for  
          uncoalesced shared loads.                                                                                     

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %        61.92
    Issued Warp Per Scheduler                        0.62
    No Eligible                            %        38.08
    Active Warps Per Scheduler          warp        15.75
    Eligible Warps Per Scheduler        warp         1.79
    ---------------------------- ----------- ------------

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        25.44
    Warp Cycles Per Executed Instruction           cycle        25.47
    Avg. Active Threads Per Warp                                24.06
    Avg. Not Predicated Off Threads Per Warp                    21.22
    ---------------------------------------- ----------- ------------

    OPT   Est. Local Speedup: 41.18%                                                                                    
          On average, each warp of this kernel spends 10.5 cycles being stalled waiting for a scoreboard dependency on  
          a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited     
          upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the        
          memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by        
          increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently     
          used data to shared memory. This stall type represents about 41.2% of the total average of 25.4 cycles        
          between issuing two instructions.                                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 20.84%                                                                                          
          Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is         
          achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early     
          thread completion, and divergent flow control can significantly lower the number of active threads in a warp  
          per cycle. This kernel achieves an average of 24.1 threads being active per cycle. This is further reduced    
          to 21.2 threads per warp due to predication. The compiler may use predication to avoid an actual branch.      
          Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads  
          execute the instructions. Try to avoid different execution paths within a warp when possible.                 

    Section: Instruction Statistics
    ---------------------------------------- ----------- -------------
    Metric Name                              Metric Unit  Metric Value
    ---------------------------------------- ----------- -------------
    Avg. Executed Instructions Per Scheduler        inst  5,072,864.10
    Executed Instructions                           inst 2,191,477,290
    Avg. Issued Instructions Per Scheduler          inst  5,080,269.09
    Issued Instructions                             inst 2,194,676,248
    ---------------------------------------- ----------- -------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   512
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                139,509
    Registers Per Thread             register/thread              32
    Shared Memory Configuration Size           Kbyte          135.17
    Driver Shared Memory Per Block       Kbyte/block            1.02
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block       Kbyte/block           28.67
    # SMs                                         SM             108
    Threads                                   thread      71,428,608
    Uses Green Context                                             0
    Waves Per SM                                              322.94
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           32
    Block Limit Registers                 block            4
    Block Limit Shared Mem                block            4
    Block Limit Warps                     block            4
    Theoretical Active Warps per SM        warp           64
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        98.52
    Achieved Active Warps Per SM           warp        63.05
    ------------------------------- ----------- ------------

    Section: GPU and Memory Workload Distribution
    -------------------------- ----------- -------------
    Metric Name                Metric Unit  Metric Value
    -------------------------- ----------- -------------
    Average DRAM Active Cycles       cycle     6,238,724
    Total DRAM Elapsed Cycles        cycle   364,455,936
    Average L1 Active Cycles         cycle  8,203,672.03
    Total L1 Elapsed Cycles          cycle   886,703,554
    Average L2 Active Cycles         cycle  7,865,021.46
    Total L2 Elapsed Cycles          cycle   629,919,360
    Average SM Active Cycles         cycle  8,203,672.03
    Total SM Elapsed Cycles          cycle   886,703,554
    Average SMSP Active Cycles       cycle  8,204,299.43
    Total SMSP Elapsed Cycles        cycle 3,546,814,216
    -------------------------- ----------- -------------

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.18
    Branch Instructions              inst  390,872,848
    Branch Efficiency                   %        79.58
    Avg. Divergent Branches                 127,259.88
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 9.676%                                                                                          
          This kernel has uncoalesced global accesses resulting in a total of 27326684 excessive sectors (10% of the    
          total 282095440 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source      
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 50.53%                                                                                          
          This kernel has uncoalesced shared accesses resulting in a total of 307467009 excessive wavefronts (51% of    
          the total 608010243 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source        
          locations. The CUDA Best Practices Guide                                                                      
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -ab) has an example on optimizing shared memory accesses.                                                     

