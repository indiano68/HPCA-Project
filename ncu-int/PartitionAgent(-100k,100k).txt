  void thrust::cuda_cub::core::_kernel_agent<thrust::cuda_cub::__merge::PartitionAgent<thrust::detail::normal_iterator<thrust::device_ptr<int>>, thrust::detail::normal_iterator<thrust::device_ptr<int>>, long, thrust::less<int>>, thrust::detail::normal_iterator<thrust::device_ptr<int>>, thrust::detail::normal_iterator<thrust::device_ptr<int>>, long, long, long, long *, thrust::less<int>, int>(T2, T3, T4, T5, T6, T7, T8, T9) (587, 1, 1)x(256, 1, 1), Context 1, Stream 7, Device 0, CC 8.0
    Section: GPU Speed Of Light Throughput
    ----------------------- ------------- ------------
    Metric Name               Metric Unit Metric Value
    ----------------------- ------------- ------------
    DRAM Frequency          cycle/nsecond         1.21
    SM Frequency            cycle/nsecond         1.09
    Elapsed Cycles                  cycle      621,324
    Memory Throughput                   %        55.00
    DRAM Throughput                     %        55.00
    Duration                      usecond       567.49
    L1/TEX Cache Throughput             %        12.64
    L2 Cache Throughput                 %        63.22
    SM Active Cycles                cycle   599,727.44
    Compute (SM) Throughput             %         1.83
    ----------------------- ------------- ------------

    OPT   This kernel grid is too small to fill the available resources on this device, resulting in only 0.7 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved 0% of  
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: PM Sampling
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Maximum Buffer Size             Kbyte       524.29
    Dropped Samples                sample            0
    Maximum Sampling Interval       cycle       20,000
    # Pass Groups                                    4
    ------------------------- ----------- ------------

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         0.05
    Executed Ipc Elapsed  inst/cycle         0.05
    Issue Slots Busy               %         1.31
    Issued Ipc Active     inst/cycle         0.05
    SM Busy                        %         1.89
    -------------------- ----------- ------------

    OPT   Est. Local Speedup: 98.11%                                                                                    
          All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps   
          per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.             

    Section: Memory Workload Analysis
    --------------------------- ------------ ------------
    Metric Name                  Metric Unit Metric Value
    --------------------------- ------------ ------------
    Memory Throughput           Gbyte/second       855.23
    Mem Busy                               %        50.38
    Max Bandwidth                          %        55.00
    L1/TEX Hit Rate                        %         1.44
    L2 Compression Success Rate            %            0
    L2 Compression Ratio                                0
    L2 Hit Rate                            %        44.98
    Mem Pipes Busy                         %         0.40
    --------------------------- ------------ ------------

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 54.53%                                                                                          
          The memory access pattern for global loads from L2 might not be optimal. On average, only 4.0 of the 32 bytes 
          transmitted per sector are utilized by each thread. This applies to the 98.6% of sectors missed in L1TEX.     
          This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced  
          global loads.                                                                                                 
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 0.0008416%                                                                                      
          The memory access pattern for global stores to L2 might not be optimal. On average, only 32.0 of the 32 bytes 
          transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX.    
          This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced  
          global stores.                                                                                                

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %         1.33
    Issued Warp Per Scheduler                        0.01
    No Eligible                            %        98.67
    Active Warps Per Scheduler          warp        10.72
    Eligible Warps Per Scheduler        warp         0.02
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 45%                                                                                       
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 75.4 cycles. This might leave hardware resources underutilized and may lead to    
          less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of   
          10.72 active warps per scheduler, but only an average of 0.02 warps were eligible per cycle. Eligible warps   
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp  
          State Statistics and Source Counters sections.                                                                

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle       808.21
    Warp Cycles Per Executed Instruction           cycle       818.71
    Avg. Active Threads Per Warp                                31.53
    Avg. Not Predicated Off Threads Per Warp                    31.39
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 45%                                                                                             
          On average, each warp of this kernel spends 713.5 cycles being stalled waiting for a scoreboard dependency on 
          a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited     
          upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the        
          memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by        
          increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently     
          used data to shared memory. This stall type represents about 88.3% of the total average of 808.2 cycles       
          between issuing two instructions.                                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst     7,747.88
    Executed Instructions                           inst    3,347,084
    Avg. Issued Instructions Per Scheduler          inst     7,848.57
    Issued Instructions                             inst    3,390,582
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   256
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                    587
    Registers Per Thread             register/thread              19
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block       Kbyte/block            1.02
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block        byte/block               0
    # SMs                                         SM             108
    Threads                                   thread         150,272
    Uses Green Context                                             0
    Waves Per SM                                                0.68
    -------------------------------- --------------- ---------------

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           32
    Block Limit Registers                 block           10
    Block Limit Shared Mem                block           32
    Block Limit Warps                     block            8
    Theoretical Active Warps per SM        warp           64
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        66.11
    Achieved Active Warps Per SM           warp        42.31
    ------------------------------- ----------- ------------

    OPT   Est. Speedup: 33.89%                                                                                          
          The difference between calculated theoretical (100.0%) and measured achieved occupancy (66.1%) can be the     
          result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can   
          occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices   
          Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on     
          optimizing occupancy.                                                                                         

    Section: GPU and Memory Workload Distribution
    -------------------------- ----------- ------------
    Metric Name                Metric Unit Metric Value
    -------------------------- ----------- ------------
    Average DRAM Active Cycles       cycle      379,167
    Total DRAM Elapsed Cycles        cycle   27,576,832
    Average L1 Active Cycles         cycle   599,727.44
    Total L1 Elapsed Cycles          cycle   67,100,560
    Average L2 Active Cycles         cycle   584,565.91
    Total L2 Elapsed Cycles          cycle   47,660,800
    Average SM Active Cycles         cycle   599,727.44
    Total SM Elapsed Cycles          cycle   67,100,560
    Average SMSP Active Cycles       cycle   591,908.78
    Total SMSP Elapsed Cycles        cycle  268,402,240
    -------------------------- ----------- ------------

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.05
    Branch Instructions              inst      154,325
    Branch Efficiency                   %        96.70
    Avg. Divergent Branches                      10.38
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 85.42%                                                                                          
          This kernel has uncoalesced global accesses resulting in a total of 7230070 excessive sectors (87% of the     
          total 8305107 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source        
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   

